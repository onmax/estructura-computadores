LEA:  MACRO (ra, eti)
      or   ra, r0, low(eti)
      or.u ra, ra, high(eti)
      ENDMACRO
    
PUSH: MACRO(ra)
      subu r30, r30, 4
      st ra, r30, r0
      ENDMACRO
      
POP:  MACRO(ra)
      ld ra, r30, 0
      or r30, r30, 4
      ENDMACRO
      
       org   0 
NF:    data  5

        org 1000
PPAL: LEA(r30, 0x8FFC)  
      ;Prueba para nFiltrados
      or r3, r0, r0
      addu r3, r3, 0; probamos nFiltrados con 10
      PUSH (r3)
      bsr nFiltrados
      POP(r3)
      stop

nFiltrados:     or   r29, r0, r0; r29 <- 0
                ld   r2, r30, r0
                cmp  r5, r2, r0
                bb1  eq, r5, CERO; Si el oper es cero, devolvemos en r29 cero
                ld   r2, r0, r0; Cargamos nF
                cmp  r5, r2, 11
                bb1  ge, r5, neg_nFiltrado; Si el valor es mayor o igual a 11, devolvemos -1
                st   r2, r0, r0; 0x000000000 == nF <- r2
                cmp r5, r2, r0
                bb1 eq, r5, DEVOLVERVALOR
                addu r2, r2, 1; r2 <- r2+1
                or   r29, r2, r2; r29 <- nF
DEVOLVERVALOR:  jmp  (r1)
neg_nFiltrado:  st r0, r0, r0
                subu r29, r0, 1; r29 <- (-1)
                jmp  (r1)
CERO:           st r0, r0, r0
                jmp  (r1)
    

      org   0x50
IMG1: data  3,3,0x07050301, 0x080A0C0F, 0x00000011
    
      org   0x100
IMG2: data 3, 3, 0x07040301, 0x090A0C0F, 0x00000011
      org 0x150
PPAL2: LEA(r2, 0x8FF8)
      LEA(r2, IMG1)
      PUSH(r2)
      LEA(r2, IMG2)
      PUSH(r2)
      bsr Comp
      POP(r1)
      POP(r30)  
      stop
    
    
Comp:           ld    r20, r30, r0; Puntero Imagen1
                ld    r21, r30, 4; Puntero Imagen2
                ld.bu r2, r20, r0; Número filas
                ld.bu r3, r20, 4; Número columnas
                addu  r20, r20, 8; Apuntamos al primer elemento de imagen1
                addu  r21, r21, 8; Apuntamos al primer elemento de imagen2
                mulu  r2, r3, r2; Calculamos dimensión total
bucle_compara:  ld.bu r3, r20, r0; Cargamos el byte de imagen1
                ld.bu r4, r21, r0; Cargamos el byte de imagen2
                addu  r20, r20, 1; Apuntamos al siguiente byte de imagen1
                addu  r21, r21, 1; Apuntamos al siguiente byte de imagen2
                subu  r3, r3, r4; Calculamos la diferencia
                cmp   r5, r3, r0
                bb1   gt, r5, nPositivo; Si el resultado es positivo vamos a la etiqueta positivo
                sub   r3, r0, r3; Si el resultado es negativo lo convertimos a positivo
nPositivo:      addu  r29, r29, r3; Sumamos al total el valor de la diferencia
                sub   r2, r2, 1; Restamos a la dimensión/contador 1
                cmp   r5, r2, r0
                bb1   gt, r5, bucle_compara; Si todavía no ha llegado al final, lo volvemos a ejecutar
                jmp(r1)
    
Filtro:         jmp(r1)
FiltRec:        jmp(r1)
ValorPixel:     jmp(r1)
FilPixel:       jmp(r1)
SubMatriz:      jmp(r1)
