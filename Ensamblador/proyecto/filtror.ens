LEA:  MACRO (ra, eti)
      or   ra, r0, low(eti)
      or.u ra, ra, high(eti)
      ENDMACRO

PUSH: MACRO(ra)
      subu r30, r30, 4
      st ra, r30, r0
      ENDMACRO

POP:  MACRO(ra)
      ld ra, r30, 0
      addu r30, r30, 4
      ENDMACRO

DBNZ: MACRO(ra, eti)
      sub ra, ra, 1
      cmp r5, ra, 0
      bb0 2, r5, eti
      ENDMACRO


        org 1000
PPAL: LEA(r30, 0x8FFC)
      ;Prueba para nFiltrados
      or r3, r0, r0
      addu r3, r3, 1;
      PUSH (r3)
      bsr nFiltrados
      POP(r3)
      stop

nFiltrados:     or   r29, r0, r0; r29 <- r0
                ld   r2, r30, r0
                cmp  r5, r2, r0
                bb1  eq, r5, CERO; Si el oper es cero, devolvemos en r29 cero
                ld   r2, r0, r0; Cargamos nF
                cmp  r5, r2, 12
                bb1  ge, r5, neg_nFiltrado; Si el valor es mayor o igual a 12, devolvemos -1
		            cmp  r5, r2, 11
		            bb1  eq, r5, once
                addu r2, r2, 1; r2 <- r2+1
                or   r29, r2, r2; r29 <- nF
                st r29,r0,r0
                jmp(r1)
once:   	      addu r2,r2,1
		            st   r2,r0,r0
		            subu r29,r29,1
		            jmp(r1)
neg_nFiltrado:  subu r29,r29,1
                jmp(r1)
CERO:           st r0, r0, r0
                jmp  (r1)






 Comp:          ld    r20, r30, r0; Puntero Imagen1
                ld    r21, r30, 4; Puntero Imagen2
                ld    r2, r20, r0; N mero filas
                ld    r3, r20, 4; N mero columnas
                addu  r20, r20, 8; Apuntamos al primer elemento de imagen1
                addu  r21, r21, 8; Apuntamos al primer elemento de imagen2
                mulu  r2, r3, r2; Calculamos dimensi n total
                xor r29, r29, r29
b_comp:         ld.bu r3, r20, r0; Cargamos el byte de imagen1
                ld.bu r4, r21, r0; Cargamos el byte de imagen2
                addu  r20, r20, 1; Apuntamos al siguiente byte de imagen1
                addu  r21, r21, 1; Apuntamos al siguiente byte de imagen2
                subu  r3, r3, r4; Calculamos la diferencia
                cmp   r5, r3, r0
                bb1   ge, r5, nPositivo; Si el resultado es positivo vamos a la etiqueta positivo
                sub   r3, r0, r3; Si el resultado es negativo lo convertimos a positivo
nPositivo:      addu r29, r29, r3
                DBNZ(r2, b_comp)
                jmp(r1)



      org   2000
IMG3: data   0,0x00000055,0
      org   2048
MFILTRO: data 0,0,0,0,1,0,0,0,0
                org 2100

      org   20000
IMG300: data   0x44444444, 0x44443434, 0x00000088
      org   20048
MFILTRO55: data 1, 1, 1, 1, 0, 1, 1, 1, 1
                org 2100
PPAL3:          LEA(r30, 0x8FF8)
                LEA(r2, MFILTRO55)
                PUSH(r2)
                LEA(r2, IMG300)
                PUSH(r2)
                bsr ValorPixel
                POP(r1)
                POP(r30)
                stop

ValorPixel:     ld r2, r30, r0; Subimagen
                ld r3, r30, 4; Mfiltro
                or r4,r0,r0; Acumulador
                or r6, r0,r0; Contador
                or r29, r0, r0
bucle_vpixel:   ld.bu r20, r2, r0;
                ld r21, r3, r0;
                cmp r5, r6, 9
                bb1 eq, r5, fin_b_vpixel
                addu r2, r2, 1
                addu r3, r3, 4
                muls r20, r20, r21
                add r4, r4, r20
                addu r6, r6, 1
                br bucle_vpixel
fin_b_vpixel:	or r29,r4,r4
                jmp(r1)

     org   3000
IMG5: data 5,5,0x04030201,0x08070605,0x0C0B0A09,0x100F0E0D,0x14131211,0x18171615,0x00000019



      org 3100
IMG6:data 0xFFFFFFFF,0xFFFFFFFF,0xFFFFFFFF
            org 10000
IMG70:data 4,8,0,0,0x00003300,0,0,0,0,0
            org 10100
IMG71:data 0,0,0,0,0,0,0,0,0
      org 3300
PPAL4:          LEA(r30, 0x8FF0)
                or r2,r0,1
                PUSH(r2)
                or r3,r0,1
                PUSH(r3)
                LEA(r2, IMG71)
                PUSH(r2)
		        LEA(r2, IMG70)
                PUSH(r2)
                bsr SubMatriz
                addu r30, r30, 16
                stop

SubMatriz:      ld r20, r30, r0; Guardamos puntero matriz
                ld r21, r30, 4; Guardamos puntero submatriz
                ld r2, r20, r0; Filas de la imagen
                ld r3, r20, 4; Columna de la imagen
                ld r4, r30, 8; Fila de pixel
                ld r6, r30, 12; Columna de pixel
                cmp r5,r4,r0; Vemos que no sea borde
                bb1 eq,r5,borde
		        cmp r5,r6,r0
                bb1 eq,r5,borde
		        addu r4, r4, 1
                cmp r5,r4,r2
		        subu r4, r4, 1
                bb1 eq,r5,borde
                addu r6, r6, 1
		        cmp r5, r6,r3
		        subu r6, r6, 1
                bb1 eq,r5,borde; Ultima comprobaci n si es borde
		        subu r4, r4, 1
		        subu r6, r6, 1
		        xor r8,r8,r8
		        addu r8, r8, 3
bucle_fila_subm:xor r9, r9, r9;Inicializamos el contador de elementos insertados por fila
		        addu r9, r9, 3;
		        addu r20, r20, 8
		        mulu r17, r4, r3
		        addu r17, r17, r6
		        addu r20, r20, r17
bucle_col_subm: ld.bu r14, r20, r0
		        st.b r14, r21, r0
		        addu r20, r20, 1
		        addu r21, r21, 1
		        DBNZ(r9, bucle_col_subm)
		        ld r20, r30, r0
		        addu r4, r4, 1
		        DBNZ(r8, bucle_fila_subm)
		        br fin_b_submatriz
borde:          mulu r17,r3,r4
		        addu r17, r17,r6
                addu r20, r20, 8
                addu r20,r20,r17
                ld.bu r3,r20,r0
                xor r2,r2,r2
		        xor r4, r4, r4
		        addu r4, r4, 9; Contador
b_borde:        st.b r3, r21, r2
                addu r2, r2, 1
                DBNZ(r4,b_borde)
fin_b_submatriz:jmp(r1)


        org 4000
IMG7:data 4,8,0,0,0x00003300,0,0,0,0,0
        org 4100
MFILTRO2:data 0,0,0,0,1,0,0,0,0
        org 14000
IMG10:data 4,8,0x44444444,0x44444444,0x33343444,0x44444444,0x44884444,0x44444444,0x44444444,0x44444444
        org 14100
MFILTRO20:data 1,1,1,1,0,1,1,1,1

        org 4200


PPAL5:          LEA(r30, 0x8FF0)
                LEA(r2, MFILTRO20)
                PUSH(r2)
                or r2,r0,1
                PUSH(r2)
                or r3,r0,1
                PUSH(r3)
                LEA(r2, IMG10)
                PUSH(r2)
                bsr FilPixel
                addu r30, r30, 16
                stop

FilPixel:       PUSH(r1)
                PUSH(r31)
                addu r31, r30, 0
                subu r30, r30, 12
                ld r2, r31, 8; Imagen
                ld r25, r31, 20
                ld r4, r31, 12; i
                ld r6, r31, 16; j
                or r28, r30, r30
                PUSH(r6)
                PUSH(r4)
                PUSH(r28)
                PUSH(r2)
                bsr SubMatriz
                addu r30, r30, 16; Deshacemos pila
                ld r2, r31, 8; Imagen
                PUSH(r25); MFIltro
                PUSH(r28);SUbImg
                bsr ValorPixel
                addu r30, r30, 8; Deshacemos pila
                ld r20, r31, 20
                xor r3, r3, r3
                addu r3, r3, 9; Contador
                xor r4, r4, r4; Resultado sumatorio
                xor r6,r6,r6
sumMFiltro:     ld r6, r20, r0
                add r4, r4, r6
                addu r20, r20, 4
                DBNZ(r3, sumMFiltro)
                cmp r5, r4, 0
                bb1 eq, r5, ceroMFiltro
                divs r29, r29, r4
ceroMFiltro:    cmp r5, r20, 0
                bb1 ls, r5, set0
                cmp r5, r29, 255
                bb1 gt, r5, set255
                br fin_FilPixel
set0:           or r29, r0, r0
                br fin_FilPixel
set255:         or r29, r0, 255
fin_FilPixel:   or r30, r31, r31
                POP(r31)
                POP(r1)
                jmp(r1)



Filtro:         PUSH(r1)
                PUSH(r31)
                or r31,r30,r30
                ld r18,r31,8; Imagen
                ld r27,r31,12; Imagen Filtrada
                ld r23,r31,16; MFiltro
                ld r13,r18,0; num filas
                ld r15,r18,4; num colum
				        st r13, r27, 0
                st r15, r27, 4
				        addu r27,r27,8
                subu r13,r13,1
                subu r15,r15,1
                xor r11, r11, r11
				        subu r11,r11,1
bfiltro_filas:  xor r12, r12, r12
				        addu r11, r11, 1
                cmp r5, r11, r13
                bb1 gt, r5, fin
bfiltro_columna:cmp r5, r12, r15
                bb1 gt, r5, bfiltro_filas
                PUSH(r23)
                PUSH(r12)
                PUSH(r11)
                PUSH(r18)
                bsr FilPixel
                POP(r18)
                POP(r11)
                POP(r12)
                POP(r23)
				        st.b r29, r27, 0
                addu r27, r27, 1
                addu r12, r12, 1
                br bfiltro_columna
fin:            or r30,r31,r31
                POP(r31)
                POP(r1)
                jmp(r1)
org 0
data 0
org 17000
ImagenIn: data 4,8,0xFF00FF00,0x00FF00FF,0xFF00FF00,0x00FF00FF,0xFF00FF00,0x00FF00FF,0xFF00FF00,0x00FF00FF
org 17100
ImagenOut: data 0,0,0,0,0,0,0,0,0,0
org 17200
FiltroRec: data 1,1,1,1,0,1,1,1,1

PPAL8:  LEA(r30,0x8FF0)
        xor r2,r2,r2
        addu r2,r2 ,1
        ;addu r2,r2,2
        PUSH(r2)
        LEA(r2,FiltroRec)
        PUSH(r2)
        LEA(r2,ImagenOut)
        PUSH(r2)
        LEA(r2,ImagenIn)
        PUSH(r2)
        bsr FiltRec
        stop


FiltRec:        PUSH (r1)
                PUSH(r31)
                or r31, r30, r0
                ld r7, r31, 8             ; ImagenIn
                ld r24, r31, 12           ; ImagenOut
                ld r16, r31, 16           ; MFiltro
                ld r26, r31, 20           ; Ncambios

                ;Paso 1
                PUSH(r16)
                PUSH(r24)
                PUSH(r7)
                bsr Filtro
                addu r30, r30, 12          ; Deshacemos la pila


                ; Paso 2
                PUSH(r7)
                PUSH(r24)
                bsr Comp                  ; Comparamos las imagenes
                addu r30, r30, 8          ; Deshacemos la pila

                cmp r5, r29, r26          ; Comparamos r29 con r26
                or r26,r29,0              ; Llevamos el valor de r29 a r26
                bb1 lt, r5, fin_filrec1   ; Si r29 < r26 terminamos
                
                xor r10, r10, r10
                addu r10, r10, 1
                PUSH(r10)
                bsr nFiltrados
                addu r30, r30, 4          ; Se deshace solo el PUSH(r10)
                cmp r5, r29, r0
                bb1 ge, r5, continua      ; Si el resultado de nFiltrados (r29) no es negativo
                or r29,r26,0
                br fin_filrec1
                
                ; Paso 4
continua:       ld r7, r31, 8             ; ImagenIn
                ld r4, r7, 0
                ld r5, r7, 4
                mulu r4, r4, r5           ; Numero de elementos de la matriz


                ;Codigo de Raul
                ;addu r4, r4, 4      
	          ;clr r4, r4,2<0>
                ;addu r4, r4,8


                ;Codigo de Max
                mulu r19, r4, r5          ; Numero de elementos de la matriz
                mak r10,r19,2<0>          ; Obtnemos los ultimos 2 bits y lo guardamos en r10
                cmp r5,r10,r0
                bb1 eq,r5,multiplo4       ; Comprobamos si es multiplo de 4
                clr r4,r4,2<0>            ; Cogemos el numero multiplo de 4 menor mas cercano     
                addu r4,r4,12             ; Sumamos 12
                br res_espacio
 multiplo4:     addu r4,r4,8              ; Sumamos 8
                ;Fin codigo de Max



 res_espacio:   subu r30, r30,r4
                ld r3, r24, 0
                ld r5, r24, 4
                st r3, r30, 0
                st r5, r30, 4
                ;mulu r4, r3, r5           ; Numero de elementos
                addu r22, r30, 8
                addu r24, r24, 8          ; Apuntamos a elems ImgOut
bucle_filrec:   ld.b r10, r24, r0
                st.b r10, r22, r0
                addu r22, r22, 1          ;Sumamos 1 a los ptr
                addu r24, r24, 1          ;Sumamos 1 a los ptr
                subu r4, r4, 1            ; restamos 1 a contador
                cmp r5, r4, 0
                bb1 gt, r5, bucle_filrec

                ; Paso 5
                or r22, r30, 0            ; Recuperamos ptr de imgout
                ld r24, r31, 12           ; ImagenOut
                ld r26,r31,20
                PUSH(r26)
                PUSH(r16); Mfiltro
                PUSH(r24)
                PUSH(r22)
                bsr FiltRec

                ; Paso 6
fin_filrec1:    or r30, r31, r0
                POP(r31)
                POP(r1)
                jmp(r1)
